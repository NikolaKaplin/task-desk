generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String
  lastName  String
  bio       String    @db.LongText
  devStatus String    @default("")
  isPublic  Boolean   @default(false)
  email     String    @unique
  password  String
  avatar    String    @default("")
  role      UserRole  @default(UNVERIFIED)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  contacts  Json?
  posts     Post[]
  Task      Task[]
  Project   Project[]
}

model Project {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  content       Json
  authorId      Int
  author        User          @relation(fields: [authorId], references: [id])
  projectStatus ProjectStatus @default(DEVELOPMENT)
  createdAt     DateTime      @default(now())
  tasks         Task[]
}

enum ProjectStatus {
  DEVELOPMENT
  PRODUCTION
}

model Task {
  id          Int        @id @default(autoincrement())
  title       String
  authorId    Int
  author      User       @relation(fields: [authorId], references: [id])
  description String
  performers  String
  image       String     @default("")
  taskStatus  TaskStatus @default(ISSUED)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  project     Project    @relation(fields: [projectId], references: [id])
  projectId   Int
}

enum TaskStatus {
  ISSUED
  PROCESSING
  REVIEW
  DONE
}

enum UserRole {
  USER
  ADMIN
  UNVERIFIED
}

model ThirdPartyTokens {
  id           String @id @default(cuid())
  service      String
  accessToken  String @db.LongText
  refreshToken String @db.LongText
}

model Post {
  id         Int        @id @default(autoincrement())
  name       String
  content    Json
  authorId   Int?
  author     User?      @relation(fields: [authorId], references: [id])
  createdAt  DateTime   @default(now())
  postStatus PostStatus @default(EXPECTATION)
}

enum PostStatus {
  EXPECTATION
  APPROVED
}
